imports:
    - { resource: parameters.yml }
    - { resource: security.yml }

framework:
    #esi:             ~
    translator:      { fallback: %locale% }
    default_locale:  en
    secret:          %secret%
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: %kernel.debug%
    form:            ~
    csrf_protection: ~
    validation:      { enabled: true, enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id: ~
    fragments:       ~

# Twig Configuration
twig:
    debug:            %kernel.debug%
    strict_variables: %kernel.debug%
    globals:
        facebook_client_id: 508538895885513
        websocketPort_external: %websocketPort_external%

# Assetic Configuration
assetic:
    debug:          %kernel.debug%
    bundles:        [TSControlBundle, TSFrontBundle, TSLiveBundle, TSSiteBundle, TSSettingsBundle, TSAccountBundle, TSFinancialBundle, TSAdminBundle, FOSUserBundle, TwigBundle ]
    read_from:      "%kernel.root_dir%/../public_html"
    write_to:       "%kernel.root_dir%/../public_html"
    java: "java"
    filters:
        cssrewrite: ~
        #closure:
        #    jar: %kernel.root_dir%/Resources/java/compiler.jar
        yui_css:
            jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"
        yui_js:
            jar: "%kernel.root_dir%/Resources/java/yuicompressor-2.4.7.jar"
        sass:
            bin: /usr/local/bin/sass
        compass:
            bin: /usr/local/bin/compass

# Doctrine Configuration
doctrine:
    dbal:
        driver:   %database_driver%
        host:     %database_host%
        port:     %database_port%
        dbname:   %database_name%
        user:     %database_user%
        password: %database_password%
        charset:  UTF8
        # if using pdo_sqlite as your database driver, add the path in parameters.yml
        # e.g. database_path: %kernel.root_dir%/data/data.db3
        # path:     %database_path%

    orm:
        auto_generate_proxy_classes: %kernel.debug%
        
        
        entity_managers:
            default:
                auto_mapping: true
                mappings:
                    gedmo_translatable:
                        type: annotation
                        prefix: Gedmo\Translatable\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translatable/Entity"
                        alias: GedmoTranslatable # this one is optional and will default to the name set for the mapping
                        is_bundle: false
                    gedmo_translator:
                        type: annotation
                        prefix: Gedmo\Translator\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Translator/Entity"
                        alias: GedmoTranslator # this one is optional and will default to the name set for the mapping
                        is_bundle: false
                    gedmo_loggable:
                        type: annotation
                        prefix: Gedmo\Loggable\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Loggable/Entity"
                        alias: GedmoLoggable # this one is optional and will default to the name set for the mapping
                        is_bundle: false
                    gedmo_tree:
                        type: annotation
                        prefix: Gedmo\Tree\Entity
                        dir: "%kernel.root_dir%/../vendor/gedmo/doctrine-extensions/lib/Gedmo/Tree/Entity"
                        alias: GedmoTree # this one is optional and will default to the name set for the mapping
                        is_bundle: false
                filters:
                    softdeleteable:
                        class: Gedmo\SoftDeleteable\Filter\SoftDeleteableFilter
                        enabled: false


# Swiftmailer Configuration
swiftmailer:
    transport: %mailer_transport%
    host:      %mailer_host%
    username:  %mailer_user%
    password:  %mailer_password%
    port:      %mailer_port%
    encryption: %mailer_encryption%
    spool:
        type: file
        path: "%kernel.root_dir%/mailspool"

# Captcha configuration
gregwar_captcha:
    web_path: "%kernel.root_dir%/../public_html"
    image_folder: "captcha"

# Nelmio API Docs
nelmio_api_doc:
    name: Tournia.net API
    sandbox:
        authentication: # default null, if set, the value of the api key is read from the query string and appended to every sandbox api call
            name: tournamentUrl
            delivery: query # query or http_basic are supported
            custom_endpoint: false # default false, if true, your user will be able to specify its own endpoint
        enabled:  true # default: true, you can set this parameter to `false` to disable the sandbox
        #endpoint: / # default: /app_dev.php, use this parameter to define which URL to call through the sandbox
        #accept_type: application/json # default null, if set, the value is automatically populated as the Accept header
    motd:
        template: TSApiBundle::top.html.twig

# FOS user options
fos_user:
    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name: main
    user_class: TS\ApiBundle\Entity\LoginAccount
    service:
        mailer: fos_user.mailer.twig_swift
    registration:
        confirmation:
            enabled: false
            #template:   TSAccountBundle:Registration:email.txt.twig
        form:
            type: ts_user_registration
    profile:
        form:
            type: ts_user_profile
    resetting:
        email:
            template: TSAccountBundle:Resetting:email.txt.twig
    from_email:
        address:        info@tournia.net
        sender_name:    Tournia.net
hwi_oauth:
    firewall_name: main
    resource_owners:
        facebook:
            type: facebook
            client_id: 508538895885513
            client_secret: 1a11bdee977014676866d4678f268693
            scope: "email"
            paths:
                 email: email
            options:
                display: page #dialog is optimized for popup window, can be 'page', 'popup', 'touch', null
                auth_with_one_url: true
        google:
            type: google
            client_id: 536709744571.apps.googleusercontent.com
            client_secret: ZpLimUMEvSuN1x_IjDV0Is4e
            scope: "email profile"
            paths:
                email: email
            options:
                access_type: online
                display: page
                approval_prompt: auto
                auth_with_one_url: true
        twitter:
            type: twitter
            client_id: UxuQbcR4LQr6d4584HeiBeFEY
            client_secret: Cu5OUEOzaQM2yIIQkAZuv7XHhNcyq8JaqGR0DlVhkqK4RGfIvm
    connect:
        account_connector: my.oauth_aware.user_provider.service
    # FOSUserBundle integration
    fosub:
        # try 30 times to check if a username is available (foo, foo1, foo2 etc)
        username_iterations: 30

        # mapping between resource owners and properties
        properties:
            google: googleId
            facebook: facebookId
            #twitter: twitterId

# Oauth server access
fos_oauth_server:
    db_driver: orm
    client_class:        TS\ApiBundle\Entity\OauthClient
    access_token_class:  TS\ApiBundle\Entity\OauthAccessToken
    refresh_token_class: TS\ApiBundle\Entity\OauthRefreshToken
    auth_code_class:     TS\ApiBundle\Entity\OauthAuthCode
    service:
        user_provider: my.oauth_aware.user_provider.service
        options:
            supported_scopes: user

stof_doctrine_extensions:
    default_locale: en_US

    # Only used if you activated the Uploadable extension
    uploadable:
        # Default file path: This is one of the three ways you can configure the path for the Uploadable extension
        default_file_path:       %kernel.root_dir%/../web/uploads

        # Mime type guesser class: Optional. By default, we provide an adapter for the one present in the HttpFoundation component of Symfony
        mime_type_guesser_class: Stof\DoctrineExtensionsBundle\Uploadable\MimeTypeGuesserAdapter

        # Default file info class implementing FileInfoInterface: Optional. By default we provide a class which is prepared to receive an UploadedFile instance.
        default_file_info_class: Stof\DoctrineExtensionsBundle\Uploadable\UploadedFileInfo
    orm:
        default:
            tree: false
            sortable: true
            sluggable: true
            timestampable: true
            
# Payment
jms_payment_core:
    secret: mnbYmQn6hY7g7y4NDx2WXBn
jms_payment_paypal:
    username: sjoerdsmink+agoniandev_api1.gmail.com
    password: XJ59GMPEY6WWQBAG
    signature: AFcWxV21C7fd0v3bYYYRCpSSRl31AJ2xSH-KGg.VVflWWffsXisrsHFU
    #debug: true/false # when true, connect to PayPal sandbox; uses kernel debug value when not specified
# Mollie
ruudk_payment_mollie:
    api_key:  live_ZmHK3AxoYHdjXsyVwLT9cMAbCtojp5
    logger:   true   # Default true
    methods:
      - ideal
      #- mistercash
      #- creditcard

# Sylius
sylius_product:
    driver: doctrine/orm # Configure the doctrine orm driver used in the documentation.
    classes:
        product:
            model: TS\FinancialBundle\Entity\Product
            controller: Sylius\Bundle\ResourceBundle\Controller\ResourceController
            repository: Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository
            form: TS\SettingsBundle\Form\Type\FinancialProductType
        property:
            model: Sylius\Bundle\ProductBundle\Model\Property
            controller: Sylius\Bundle\ResourceBundle\Controller\ResourceController
            repository: Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository
            form: Sylius\Bundle\ProductBundle\Form\Type\PropertyType
        prototype:
            model: Sylius\Bundle\ProductBundle\Model\Prototype
            controller: Sylius\Bundle\ProductBundle\Controller\PrototypeController
            repository: Sylius\Bundle\ResourceBundle\Doctrine\ORM\EntityRepository
            form: Sylius\Bundle\ProductBundle\Form\Type\PrototypeType

sylius_cart:
    resolver: ts_financial.cart_item.resolver # The id of our newly created service.
    classes: # This key can be empty but it must be present in the configuration.
        cart:
            controller: TS\FinancialBundle\Controller\CartController
        #item:
        #     controller: TS\FinancialBundle\Controller\CartItemController
        #    model: TS\FinancialBundle\Entity\Cart # If you have created a custom Cart entity.
        #cart_item:
        #    model: TS\FinancialBundle\Entity\CartItem # If you have created a custom CartItem entity.

sylius_order:
    driver: doctrine/orm # Configure the doctrine orm driver used in documentation.
    classes:
        #order:
        #    model: TS\FinancialBundle\Entity\Order
        order:
            model: TS\FinancialBundle\Entity\Cart # If you have created a custom Cart entity.
        order_item:
            model: TS\FinancialBundle\Entity\CartItem # If you have created a custom CartItem entity.
        adjustment:
            model: TS\FinancialBundle\Entity\PaymentAdjustment

sylius_money:
    driver: doctrine/orm # Configure the doctrine orm driver used in documentation.

white_october_tcpdf:
    class: 'TS\ControlBundle\PDF\CustomizedPdf'
    tcpdf:
        k_path_images: '%kernel.root_dir%/../public_html/'


# Web Socket Configuration
gos_web_socket:
    server:
        host: %websocketHost_internal%  #The host ip to bind to
        port: %websocketPort_internal%  #The port the socket server will listen on
        router:
            resources:
                - @TSApiBundle/Resources/config/routing_websocket.yml
    pushers:
        wamp:
            host: %websocketHost_internal%
            port: %websocketPort_internal%

# Push notifications
rms_push_notifications:
  android:
      timeout: 5 # Seconds to wait for connection timeout, default is 5
      gcm:
          api_key: AIzaSyDBKgwmu62GbGBUPMSYJaoTgb1Er4BND8Y # This is titled "Server Key" when creating it
  #        use_multi_curl: <boolean_android_gcm_use_multi_curl> # default is true
  ios:
      timeout: 60 # Seconds to wait for connection timeout, default is 60
      sandbox: false
      pem: certs/TourniaProd.pem # can be absolute or relative path (from app directory)
      #passphrase: <string_apns_certificate_passphrase>

services:
    my.oauth_aware.user_provider.service:
        class: TS\AccountBundle\SecurityProvider\OauthLoginProvider
        arguments: [@fos_user.user_manager,{facebook: facebookId, google: googleId}, @session, @service_container]

