<?php

namespace TS\ApiBundle\Entity;

use DateTime;
use Doctrine\ORM\EntityRepository;

/**
 * TournamentRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TournamentRepository extends EntityRepository
{
    public function findUsingFilters($filter) {
        $queryBuilder = $this->createQueryBuilder('t');

        if(!empty($filter['keyword'])) {
            $queryBuilder
                ->andWhere('t.name LIKE :name')
                ->setParameter('name', '%' . $filter['keyword'] . '%');
        }

        if(!empty($filter['startDate'])) {
            $startDate = DateTime::createFromFormat("d-m-Y", $filter['startDate']);
            if ($startDate !== false) {
                $startDate = $startDate->setTime(0, 0, 0);
                $queryBuilder
                    ->andWhere('t.startDateTime >= :startDate')
                    ->setParameter('startDate', $startDate->format('Y-m-d H:i:s'));
            }
        }

        if(!empty($filter['endDate'])) {
            $endDate = DateTime::createFromFormat("d-m-Y", $filter['endDate']);
            if ($endDate !== false) {
                $endDate = $endDate->setTime(23, 59, 59);
                $queryBuilder
                    ->andWhere('t.endDateTime <= :endDate')
                    ->setParameter('endDate', $endDate->format('Y-m-d H:i:s'));
            }
        }

        if(!empty($filter['location'])) {
            $queryBuilder
                ->andWhere('site.locationAddress LIKE :location')
                ->setParameter('location', '%' . $filter['location'] . '%');
        }

        if(!empty($filter['limit'])) {
            $queryBuilder
                ->setMaxResults($filter['limit']);
        }

        $queryBuilder
            ->orderBy("t.endDateTime", "DESC")
            ->leftJoin("t.players", "players")
            ->leftJoin("t.site", "site")
            ->groupBy("t")
            ->addSelect("t, site, COUNT(players) AS nrPlayers");

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Get currently playing tournaments
     * @return array
     */
    public function getCurrentlyPlayingTournaments() {
        $todayDate = new DateTime("today");

        $queryBuilder = $this->createQueryBuilder('t')
            ->select('t, site')
            ->andWhere('t.startDateTime <= :todayDate')
            ->andWhere(':todayDate <= t.endDateTime')
            ->setParameter('todayDate', $todayDate->format('Y-m-d'))
            ->leftJoin("t.site", "site")
            ->orderBy("t.startDateTime");

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Get upcoming tournaments
     * @return array
     */
    public function getUpcomingTournaments() {
        $todayDate = new DateTime("today");

        $queryBuilder = $this->createQueryBuilder('t')
            ->select('t, site, COUNT(players) AS nrPlayers')
            ->andWhere('t.startDateTime > :todayDate')
            ->setParameter('todayDate', $todayDate->format('Y-m-d'))
            ->leftJoin("t.site", "site")
            ->leftJoin("t.players", "players")
            ->groupBy("t")
            ->orderBy("t.startDateTime");

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Get earlier tournaments, based on popularity max 8
     * @return array
     */
    public function getPopularEarlierTournaments() {
        $todayDate = new DateTime("today");

        $queryBuilder = $this->createQueryBuilder('t')
            ->select('t, COUNT(players) AS nrPlayers, site, players')
            ->andWhere('t.endDateTime < :todayDate')
            ->setParameter('todayDate', $todayDate->format('Y-m-d'))
            ->leftJoin("t.site", "site")
            ->leftJoin("t.players", "players")
            ->groupBy("t")
            ->addOrderBy("t.endDateTime", "DESC")
            ->setMaxResults(8);

        return $queryBuilder->getQuery()->getResult();
    }

    /**
     * Clone a tournament
     * @param \TS\ApiBundle\Entity\Tournament $tournament
     * @return \TS\ApiBundle\Entity\Tournament
     */
    public function cloneTournament($tournament) {
        $copiedTournament = clone $tournament;
        foreach($tournament->getOrganizerPersons() as $organizerPerson) {
            $copiedTournament->addOrganizerPerson($organizerPerson);
        }
        foreach($tournament->getDisciplineTypes() as $disciplineType) {
            $copiedDisciplineType = clone $disciplineType;
            $copiedDisciplineType->setTournament($copiedTournament);
            $copiedTournament->addDisciplineType($copiedDisciplineType);

            foreach($disciplineType->getDisciplines() as $discipline) {
                $copiedDiscipline = clone $discipline;
                $copiedDiscipline->setTournament($copiedTournament);
                $copiedTournament->addDiscipline($copiedDiscipline);
                $copiedDisciplineType->addDiscipline($copiedDiscipline);
            }
        }
        foreach($tournament->getLocations() as $location) {
            $copiedLocation = clone $location;
            $copiedLocation->setTournament($copiedTournament);
            $copiedTournament->addLocation($copiedLocation);
        }
        foreach($tournament->getRegistrationFormFields() as $registrationFormField) {
            $copiedRegistrationFormField = clone $registrationFormField;
            $copiedRegistrationFormField->setTournament($copiedTournament);
            $copiedTournament->addRegistrationFormField($copiedRegistrationFormField);
        }
        foreach($tournament->getProducts() as $product) {
            $copiedProduct = clone $product;
            $copiedProduct->setTournament($copiedTournament);
            $copiedProduct->setSlug($product->getSlug());
            $copiedTournament->addProduct($copiedProduct);
        }
        $copiedSite = clone $tournament->getSite();
        $copiedSite->setTournament($copiedTournament);
        foreach($tournament->getSite()->getSitePages() as $sitePage) {
            $copiedSitePage = clone $sitePage;
            $copiedSitePage->setSite($copiedSite);
            $copiedSite->addSitePage($copiedSitePage);
        }
        $copiedTournament->setSite($copiedSite);
        $copiedAuthorization = clone $tournament->getAuthorization();
        $copiedAuthorization->setTournament($copiedTournament);
        $copiedTournament->setAuthorization($copiedAuthorization);
        return $copiedTournament;
    }
}
