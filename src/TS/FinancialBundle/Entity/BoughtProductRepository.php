<?php

namespace TS\FinancialBundle\Entity;

use Doctrine\ORM\EntityRepository;
use TS\ApiBundle\Entity\Tournament;

/**
 * BoughtProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BoughtProductRepository extends EntityRepository
{
    public function getAllBoughtProducts(Tournament $tournament)
    {
        $query = $this->createQueryBuilder('bp')
            //->select(array("bp", "player", "execPerson"))
            ->join("bp.player", "player")
            ->leftJoin("bp.cartOrder", "cartOrder")
            ->leftJoin("cartOrder.execPerson", "execPerson")
            ->leftJoin("cartOrder.paymentInstruction", "paymentInstruction")
            ->andWhere('bp.tournament = :tournament')
            ->setParameter('tournament', $tournament)
            ->orderBy('player.firstName', "ASC");
        return $query->getQuery()->getResult();
    }

    /**
     * The total amount a tournament has for bought products
     * @param Tournament $tournament
     * @return int
     */
    public function getTotalAmount(Tournament $tournament)
    {
        $query = $this->createQueryBuilder('bp')
            ->select("SUM(bp.amount)")
            ->andWhere('bp.tournament = :tournament')
            ->setParameter('tournament', $tournament);
        return $query->getQuery()->getSingleScalarResult();
    }

    /**
     * The total outstanding (total amount - paid amount) a tournament has for bought products
     * @param Tournament $tournament
     * @return int
     */
    public function getOutstandingAmount(Tournament $tournament)
    {
        $query = $this->createQueryBuilder('bp')
            ->select("SUM(bp.amount) - SUM(bp.paidoutAmount)")
            ->andWhere('bp.tournament = :tournament')
            ->setParameter('tournament', $tournament);

        return $query->getQuery()->getSingleScalarResult();
    }
}
